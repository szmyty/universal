# Define common labels for Docker objects
x-labels: &labels
  labels:
    app.name: ${COMPOSE_PROJECT_NAME:-universal}

# Shared settings for all services
x-settings: &settings # Restart containers unless stopped manually
  restart: unless-stopped
  # Environment variables for all services
  environment:
    - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-universal}
    - APP_NAME=${APP_NAME:-universal}
    - TZ=${TZ:-UTC}
  # Allow access to the host machine from the container
  extra_hosts:
    - "host.docker.internal:host-gateway"
  # Init system for graceful shutdown
  init: true
  # Pull policy for images
  pull_policy: missing
  # Attach the container to the project network
  networks:
    default:
      aliases:
        - ${COMPOSE_PROJECT_NAME:-universal}-network
  # Apply the common labels to all services
  <<: *labels

# Define the Docker network for all services
networks:
  default:
    # Name of the Docker network, based on the project name
    name: ${COMPOSE_PROJECT_NAME:-universal}-network
    # Use the bridge driver for the network (https://docs.docker.com/compose/networking/)
    driver: bridge
    # Allows containers to manually attach to this network
    attachable: true
    # Custom options for bridge network driver
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Define named volumes for persistent storage
volumes:
  database:
    # Name of the volume for database storage
    name: database
    # Driver for the volume, using local storage
    driver: local
  pgadmin:
    # Name of the volume for database storage
    name: pgadmin
    # Driver for the volume, using local storage
    driver: local

# Define the base services in the Docker Compose file
services:
  # API server service
  api:
    container_name: ${API_CONTAINER_NAME:-api}
    hostname: ${API_HOSTNAME:-api}
    build:
      context: .
      dockerfile: ./services/api/Dockerfile
      args:
        - API_PORT=${API_PORT:-8000}
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-universal}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${API_PORT:-8000}/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    <<: *settings

  # Keycloak / Identity and Access Management Database service

  # PostGIS database service
  database:
    image: postgis/postgis@sha256:495a314df49c5a7a420ee076042b6f91e30f195a0ce0901d2c2369f5bf67c8e7
    container_name: ${DATABASE_CONTAINER_NAME:-database}
    hostname: ${DATABASE_HOSTNAME:-database}
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-universal}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready --username $DATABASE_USER --dbname $DATABASE_NAME --port $DATABASE_PORT || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    platform: linux/amd64
    <<: *settings

  # pgAdmin service for managing the PostGIS database
  pgadmin:
    image: dpage/pgadmin4@sha256:6b1c0db09695758c72abcd5160b7c4cc6d0847ab0c90a2403bdbf951f0defb5a
    container_name: ${PGADMIN_CONTAINER_NAME:-pgadmin}
    hostname: ${PGADMIN_HOSTNAME:-pgadmin}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@universal.localhost}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-adminpassword}
      PGADMIN_CONFIG_ALLOW_SPECIAL_EMAIL_DOMAINS: "['localhost']"
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT:-5050}
    ports:
      - "${PGADMIN_EXPOSED_PORT:-5050}:${PGADMIN_PORT:-5050}"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./services/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./services/pgadmin/config_local.py:/pgadmin4/config_local.py:ro
      - ./services/pgadmin/healthcheck.py:/pgadmin4/healthcheck.py:ro
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python3 /pgadmin4/healthcheck.py"]
      interval: 10s
      timeout: 10s
      retries: 10
    platform: linux/amd64
    <<: *settings
