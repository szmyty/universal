---
# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

# Define common labels for Docker objects
x-labels: &labels
  labels:
    app.name: ${COMPOSE_PROJECT_NAME:-universal}
    app.scope: universal

# Shared settings for all services
x-settings: &settings # Restart containers unless stopped manually
  restart: unless-stopped
  # Environment variables for all services
  environment:
    - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-universal}
    - APP_NAME=${APP_NAME:-universal}
    - TZ=${TZ:-UTC}
  # Allow access to the host machine from the container
  extra_hosts:
    - "host.docker.internal:host-gateway"
  # Init system for graceful shutdown
  init: true
  # Pull policy for images
  pull_policy: missing
  # Attach the container to the project network
  networks:
    default:
      aliases:
        - ${COMPOSE_PROJECT_NAME:-universal}-network
  # Use a specific platform for compatibility
  platform: linux/amd64
  # Apply the common labels to all services
  <<: *labels

# Define the Docker network for all services
networks:
  default:
    # Name of the Docker network, based on the project name
    name: ${COMPOSE_PROJECT_NAME:-universal}-network
    # Use the bridge driver for the network (https://docs.docker.com/compose/networking/)
    driver: bridge
    # Allows containers to manually attach to this network
    attachable: true
    # Custom options for bridge network driver
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    <<: *labels

# Define named volumes for persistent storage
volumes:
  database:
    # Name of the volume for database storage
    name: database
    # Driver for the volume, using local storage
    driver: local
    <<: *labels
  pgadmin:
    # Name of the volume for database storage
    name: pgadmin
    # Driver for the volume, using local storage
    driver: local
    <<: *labels
  web:
    # Name of the volume for web server storage
    name: web
    # Driver for the volume, using local storage
    driver: local
    <<: *labels
  keycloak-db:
    # Name of the volume for Keycloak database storage
    name: keycloak-db
    # Driver for the volume, using local storage
    driver: local
    <<: *labels

# Define the base services in the Docker Compose file
services:
  # API server service
  api:
    container_name: ${API_CONTAINER_NAME:-api}
    hostname: ${API_HOSTNAME:-api}
    build:
      context: .
      dockerfile: ./services/api/Dockerfile
      args:
        - API_PORT=${API_PORT:-8000}
        - APP_USER=${APP_USER:-universal}
        - APP_GROUP=${APP_GROUP:-universal}
    environment:
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-universal}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${API_PORT:-8000}/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      database:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    <<: *settings

  # Keycloak / Identity and Access Management Database service
  keycloak-db:
    image: postgis/postgis@sha256:495a314df49c5a7a420ee076042b6f91e30f195a0ce0901d2c2369f5bf67c8e7
    container_name: ${KEYCLOAK_DB_CONTAINER_NAME:-keycloak-db}
    hostname: ${KEYCLOAK_DB_HOSTNAME:-keycloak-db}
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_NAME:-keycloak}
      POSTGRES_USER: ${KEYCLOAK_DB_USER:-keycloak}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
    volumes:
      - keycloak-db:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready --username $KEYCLOAK_DB_USER --dbname $KEYCLOAK_DB_NAME --port $KEYCLOAK_DB_PORT || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    <<: *settings

  # Keycloak service for Identity and Access Management
  keycloak:
    image: keycloak/keycloak@sha256:4883630ef9db14031cde3e60700c9a9a8eaf1b5c24db1589d6a2d43de38ba2a9
    container_name: ${KEYCLOAK_CONTAINER_NAME:-keycloak}
    hostname: ${KEYCLOAK_HOSTNAME:-keycloak}
    environment:
      DB_VENDOR: ${KEYCLOAK_DB_VENDOR:-postgres}
      DB_SCHEMA: ${KEYCLOAK_DB_SCHEMA:-public}
      FQDN: ${FQDN:-localhost}
      KC_HOSTNAME: ${FQDN:-localhost}
      KEYCLOAK_DB_HOST: ${KEYCLOAK_DB_HOSTNAME:-keycloak-db}
      KEYCLOAK_DB_PORT: ${KEYCLOAK_DB_PORT:-5432}
      KEYCLOAK_DB_NAME: ${KEYCLOAK_DB_NAME:-keycloak}
      KEYCLOAK_DB_USER: ${KEYCLOAK_DB_USER:-keycloak}
      KEYCLOAK_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-adminpassword}
      KEYCLOAK_LOGLEVEL: ${KEYCLOAK_LOGLEVEL:-INFO}
      ROOT_LOGLEVEL: ${KEYCLOAK_ROOT_LOGLEVEL:-INFO}
      PROXY_ADDRESS_FORWARDING: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HTTP_MANAGEMENT_PORT: ${KEYCLOAK_HTTP_MANAGEMENT_PORT:-9000}
      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.scripts=enabled -Dkeycloak.profile.feature.upload_scripts=enabled
    healthcheck:
      # https://gist.github.com/sarath-soman/5d9aec06953bbd0990c648605d4dba07
      test:
        [
          "CMD-SHELL",
          '[ -f /tmp/HealthCheck.java ] || echo ''public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { try { java.net.URI uri = new java.net.URI(args[0]); java.net.HttpURLConnection conn = (java.net.HttpURLConnection) uri.toURL().openConnection(); int code = conn.getResponseCode(); System.out.println("Health check response code: " + code); System.exit(code == java.net.HttpURLConnection.HTTP_OK ? 0 : 1); } catch (Exception e) { e.printStackTrace(); System.exit(1); } } }'' > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:${KEYCLOAK_HTTP_PORT}/auth/realms/master',
        ]
      interval: 5s
      timeout: 5s
      retries: 30
    entrypoint:
      [
        "/opt/keycloak/bin/kc.sh",
        "start-dev",
        "--hostname=https://${FQDN:-localhost}:${WEB_HTTPS_EXPOSED_PORT:-443}/auth",
        "--http-relative-path=${KEYCLOAK_HTTP_RELATIVE_PATH:-/auth}",
        "--db=${KEYCLOAK_DB_VENDOR:-postgres}",
        "--db-url-host=${KEYCLOAK_DB_HOSTNAME:-keycloak-db}",
        "--db-username=${KEYCLOAK_DB_USER:-keycloak}",
        "--db-password=${KEYCLOAK_DB_PASSWORD:-keycloak}",
        "--db-url-database=${KEYCLOAK_DB_NAME:-keycloak}",
      ]
    depends_on:
      keycloak-db:
        condition: service_healthy
    <<: *settings

  # PostGIS database service
  database:
    image: postgis/postgis@sha256:495a314df49c5a7a420ee076042b6f91e30f195a0ce0901d2c2369f5bf67c8e7
    container_name: ${DATABASE_CONTAINER_NAME:-database}
    hostname: ${DATABASE_HOSTNAME:-database}
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-universal}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready --username $DATABASE_USER --dbname $DATABASE_NAME --port $DATABASE_PORT || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    <<: *settings

  # pgAdmin service for managing the PostGIS database
  pgadmin:
    image: dpage/pgadmin4@sha256:6b1c0db09695758c72abcd5160b7c4cc6d0847ab0c90a2403bdbf951f0defb5a
    container_name: ${PGADMIN_CONTAINER_NAME:-pgadmin}
    hostname: ${PGADMIN_HOSTNAME:-pgadmin}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@universal.localhost}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-adminpassword}
      PGADMIN_CONFIG_ALLOW_SPECIAL_EMAIL_DOMAINS: "['localhost']"
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT:-5050}
    ports:
      - "${PGADMIN_EXPOSED_PORT:-5050}:${PGADMIN_PORT:-5050}"
    volumes:
      - pgadmin:/var/lib/pgadmin
      - ./services/pgadmin/servers.json:/pgadmin4/servers.json:ro
      - ./services/pgadmin/config_local.py:/pgadmin4/config_local.py:ro
      - ./services/pgadmin/healthcheck.py:/pgadmin4/healthcheck.py:ro
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python3 /pgadmin4/healthcheck.py"]
      interval: 10s
      timeout: 10s
      retries: 10
    <<: *settings

  # Apache2 web server/reverse proxy service
  web:
    container_name: ${WEB_CONTAINER_NAME:-web}
    hostname: ${WEB_HOSTNAME:-web}
    build:
      context: .
      dockerfile: ./apps/ui/Dockerfile
      args:
        - APP_USER=${APP_USER:-universal}
        - APP_GROUP=${APP_GROUP:-universal}
        - WEB_HTTP_PORT=${WEB_HTTP_PORT:-80}
        - WEB_HTTPS_PORT=${WEB_HTTPS_PORT:-443}
        - FQDN=${FQDN:-localhost}
        - API_PREFIX=${API_PREFIX:-/api}
    ports:
      - "${WEB_HTTP_EXPOSED_PORT:-80}:${WEB_HTTP_PORT:-80}"
      - "${WEB_HTTPS_EXPOSED_PORT:-443}:${WEB_HTTPS_PORT:-443}"
    volumes:
      - ./services/apache/certs/${APP_ENV}/cert.key:/usr/local/apache2/conf/server.key:ro
      - ./services/apache/certs/${APP_ENV}/cert.crt:/usr/local/apache2/conf/server.crt:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${WEB_HTTP_PORT:-80}/health?auto || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      api:
        condition: service_healthy
    <<: *settings
