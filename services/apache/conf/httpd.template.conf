# This is the main Apache HTTP Server configuration file.

# The root directory of the server installation.
ServerRoot "/usr/local/apache2"

DefaultRuntimeDir "${APACHE_RUNTIME_DIR}"

Define RUNTIME_DIR "${APACHE_RUNTIME_DIR}"

# The default port that the server listens on.
Listen ${WEB_HTTP_PORT}

# Global audit log of *all* requests
GlobalLog /dev/stdout combined

# Global error log
ErrorLog /dev/stderr

# Global transfer log
CustomLog /dev/stdout combined

# Include our modularized list of required modules
Include conf/extra/httpd-modules.conf

# Set the user and group under which the server will run.
<IfModule unixd_module>
User ${APP_USER}
Group ${APP_GROUP}
</IfModule>

# 'Main' server configuration
# Server administration contact information.
# This address is used for server-generated messages and error reports.
ServerAdmin ${SERVER_ADMIN_EMAIL}

# The hostname of the server, used in server-generated URLs.
# This should be the fully qualified domain name (FQDN) of your server.
ServerName ${FQDN}

# Deny access to the entirety of your server's filesystem.
<Directory />
    AllowOverride none
    Require all denied
</Directory>

# ------------------------------------------------------------------------------
# üåê Default Web Root
# ------------------------------------------------------------------------------

# The directory from which Apache will serve static files (HTML, JS, CSS, etc.)
DocumentRoot "/usr/local/apache2/htdocs"

<Directory "/usr/local/apache2/htdocs">
    Options +Indexes +FollowSymLinks -MultiViews
    AllowOverride None
    Require all granted

    RewriteEngine On

    # üîí Skip SPA rewrite for API or other backend routes
    RewriteCond %{REQUEST_URI} ^/(api|auth|health|metrics|pgadmin|vite)/ [NC]
    RewriteRule ^ - [L]

    # üîÅ Only rewrite if the file/directory doesn't exist
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d

    # üåê SPA fallback: serve index.html
    RewriteRule ^ index.html [L]
</Directory>


# Sets the default index file to be served when a directory is requested.
<IfModule dir_module>
    DirectoryIndex index.html
</IfModule>

# Prevent access to hidden files and directories.
# This includes files and directories starting with a dot (e.g., .htaccess).
<Files ".ht*">
    Require all denied
</Files>

# Load modular logging config
Include conf/extra/httpd-logging.conf

# Legacy CGI support (not used currently)
Include conf/extra/httpd-cgi.conf

<IfModule headers_module>
    #
    # Avoid passing HTTP_PROXY environment to CGI's on this or any proxied
    # backend servers which have lingering "httpoxy" defects.
    # 'Proxy' request header is undefined by the IETF, not listed by IANA
    #
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    #
    # TypesConfig points to the file containing the list of mappings from
    # filename extension to MIME-type.
    #
    TypesConfig conf/mime.types

    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>

# Configure mod_proxy_html to understand HTML4/XHTML1
<IfModule proxy_html_module>
Include conf/extra/proxy-html.conf
</IfModule>

# Secure (SSL/TLS) connections
# Include conf/extra/httpd-ssl.conf
#
# Note: The following must must be present to support
#       starting without SSL on platforms with no /dev/random equivalent
#       but a statically compiled-in mod_ssl.
#
<IfModule ssl_module>
SSLRandomSeed startup builtin
SSLRandomSeed connect builtin
</IfModule>

# Apache SSL configuration

# HTTPS port to listen on
# This is the port where the server will listen for secure connections.
Listen ${WEB_HTTPS_PORT}

# üîê Global SSL settings
SSLCipherSuite HIGH:MEDIUM:!MD5:!RC4:!3DES
SSLProxyCipherSuite HIGH:MEDIUM:!MD5:!RC4:!3DES
SSLHonorCipherOrder on
SSLProtocol -all +TLSv1.2 +TLSv1.3
SSLProxyProtocol -all +TLSv1.2 +TLSv1.3
SSLPassPhraseDialog builtin
# SSLSessionCache "shmcb:/usr/local/apache2/logs/ssl_scache(512000)"

# SSL session cache (if using mod_ssl)
SSLSessionCache "shmcb:${APACHE_RUNTIME_DIR}/ssl_scache(512000)"

# OCSP stapling cache (if using stapling)
SSLStaplingCache "shmcb:${APACHE_RUNTIME_DIR}/ssl_stapling(32768)"

SSLSessionCacheTimeout 300

# Where Apache stores its PID file
PidFile "${APACHE_RUNTIME_DIR}/httpd.pid"

# For prefork/event/worker MPMs (scoreboard/status memory files)
ScoreBoardFile "${APACHE_RUNTIME_DIR}/apache_runtime_status"

# Shared memory lock file storage
Mutex default:${APACHE_RUNTIME_DIR}

# üö´ Disable legacy HTTP methods
TraceEnable off

<VirtualHost *:${WEB_HTTP_PORT}>
  ServerName ${FQDN}

  RewriteEngine On
  RewriteCond %{HTTPS} off
  RewriteRule ^/?(.*) https://${FQDN}:${WEB_HTTPS_PORT}/$1 [R=301,L]
</VirtualHost>

# üåê SSL Virtual Host
<VirtualHost _default_:${WEB_HTTPS_PORT}>
    DocumentRoot "/usr/local/apache2/htdocs"
    ServerName ${FQDN}
    ServerAdmin ${SERVER_ADMIN_EMAIL}
    # ErrorLog /proc/self/fd/2
    # TransferLog /proc/self/fd/1
    ErrorLog /dev/stderr
    TransferLog /dev/stdout

    # üîê OIDC Keycloak SSO
    Include conf/extra/oidc-rewrite.conf

    OIDCCryptoPassphrase a-supersecret-random-secret-used-by-apache-oidc
    OIDCProviderMetadataURL http://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_HTTP_PORT}/auth/realms/${KEYCLOAK_REALM}/.well-known/openid-configuration
    OIDCClientID ${KEYCLOAK_CLIENT_ID}
    OIDCClientSecret ${KEYCLOAK_CLIENT_SECRET}
    OIDCRedirectURI https://${FQDN}:${WEB_HTTPS_PORT}/oauth2callback
    OIDCRemoteUserClaim email
    OIDCScope "openid profile email"
    OIDCSSLValidateServer off

    # Add OIDC authentication to the root path
    <Location />
        AuthType openid-connect
        Require valid-user
    </Location>

    # üîì Allow OIDC callback to bypass auth (must come first)
    # <Location /oauth2callback>
    #     Require all granted
    # </Location>

    <Location /favicon.ico>
        Require all granted
    </Location>

    # Enable the status module for monitoring. '/health' is the endpoint.
    include conf/extra/httpd-status.conf

    # üîì Allow static assets to be served without auth

    <Location /robots.txt>
      Require all granted
    </Location>

    <Location /manifest.webmanifest>
      Require all granted
    </Location>

    # <LocationMatch "\.(css|js|svg|png|jpg|jpeg|gif|ico|webp|woff2?|map)$">
    #     Require all granted
    # </LocationMatch>

    ProxyRequests On
    ProxyPreserveHost On
    AllowEncodedSlashes NoDecode

    # üîÅ Conditionally include dev-only reverse proxy if it exists
    IncludeOptional conf/extra/dev-reverse-proxy.conf

    # üîÅ Reverse Proxy to Keycloak
    <Location ${KEYCLOAK_HTTP_RELATIVE_PATH}>
        Require all granted
        ProxyPass "http://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_HTTP_PORT}/auth"
        ProxyPassReverse "http://${KEYCLOAK_HOSTNAME}:${KEYCLOAK_HTTP_PORT}/auth"
    </Location>

    # üîÅ Reverse Proxy to FastAPI backend
    <Location ${API_PREFIX}>
        AuthType openid-connect
        Require valid-user

        RequestHeader set Authorization "Bearer %{oidc_access_token}e" env=OIDC_access_token

        RequestHeader set X-Remote-User %{REMOTE_USER}s env=REMOTE_USER
        RequestHeader set X-Email %{OIDC_CLAIM_email}e env=OIDC_CLAIM_email
        RequestHeader set X-Name %{OIDC_CLAIM_name}e env=OIDC_CLAIM_name
        RequestHeader set X-Given-Name %{OIDC_CLAIM_given_name}e env=OIDC_CLAIM_given_name
        RequestHeader set X-Family-Name %{OIDC_CLAIM_family_name}e env=OIDC_CLAIM_family_name
        RequestHeader set X-Locale %{OIDC_CLAIM_locale}e env=OIDC_CLAIM_locale
        RequestHeader set X-Picture %{OIDC_CLAIM_picture}e env=OIDC_CLAIM_picture
        RequestHeader set X-Roles %{OIDC_CLAIM_realm_access.roles}e env=OIDC_CLAIM_realm_access.roles
        RequestHeader set X-Groups %{OIDC_CLAIM_groups}e env=OIDC_CLAIM_groups

        ProxyPass "http://${API_HOSTNAME}:${API_PORT}"
        ProxyPassReverse "http://${API_HOSTNAME}:${API_PORT}"
    </Location>

    # üîÅ Reverse Proxy pgAdmin
    <Location /pgadmin>
      AuthType openid-connect
      Require valid-user
      ProxyPass "http://${PGADMIN_HOSTNAME}:${PGADMIN_PORT}"
      ProxyPassReverse "http://${PGADMIN_HOSTNAME}:${PGADMIN_PORT}"
    </Location>

    # üîÅ Reverse Proxy to Portainer (with WebSocket support)
    IncludeOptional conf/extra/portainer.template.conf

    # üîß Proxy Headers
    RequestHeader set X-Remote-User %{REMOTE_USER}s
    RequestHeader set X-Session-Id %{oidc_claim_session_state}e
    RequestHeader set X-Forwarded-Proto "https"
    RequestHeader set X-Forwarded-Port "%{SERVER_PORT}s"

    # üåç CORS
    Header set Access-Control-Allow-Origin "*"
    Header set Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, X-Remote-User, Access-Control-Allow-Origin"
    Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    Header always set Strict-Transport-Security "max-age=63072000;"

    # üîê SSL Setup
    SSLEngine on
    SSLCertificateFile "/usr/local/apache2/conf/server.crt"
    SSLCertificateKeyFile "/usr/local/apache2/conf/server.key"

    # üì§ Enable standard SSL env vars for CGI or scripts
    <FilesMatch "\.(cgi|shtml|phtml|php)$">
        SSLOptions +StdEnvVars
    </FilesMatch>
    <Directory "/usr/local/apache2/cgi-bin">
        SSLOptions +StdEnvVars
    </Directory>

    # üß† Browser compatibility workarounds
    BrowserMatch "MSIE [2-5]" \
        nokeepalive ssl-unclean-shutdown \
        downgrade-1.0 force-response-1.0

    # üìù Per-VirtualHost SSL log
    # CustomLog /proc/self/fd/1 "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
    CustomLog /dev/stdout "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</VirtualHost>

<IfModule mod_status.c>
    ExtendedStatus On
</IfModule>
