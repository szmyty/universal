---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Taskfile for managing development tasks in a multi-platform environment

version: "3"

tasks:
  up:refresh:
    desc: Refresh selected services using Docker Compose
    vars:
      SERVICES: '{{default "" .SERVICES}}'
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          down {{.SERVICES}}
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          build {{.SERVICES}}

      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          up {{.SERVICES}} \
          --detach
    silent: true

  up:
    desc: Start selected services using Docker Compose
    vars:
      SERVICES: '{{default "" .SERVICES}}'
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          build \
          --no-cache {{.SERVICES}}

      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          up {{.SERVICES}} \
          --build \
          --force-recreate \
          --detach \
          --always-recreate-deps
    silent: true

  down:
    desc: Stop selected services
    vars:
      SERVICES: '{{default "" .SERVICES}}'
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          stop {{.SERVICES}}
    silent: true

  logs:
    desc: View logs for selected services
    vars:
      SERVICES: '{{default "" .SERVICES}}'
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          logs -f {{.SERVICES}}
    silent: true

  status:
    desc: Show status of selected services
    vars:
      SERVICES: '{{default "" .SERVICES}}'
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          ps {{.SERVICES}}
    silent: true

  health:
    desc: Show health-check status for a specific service
    vars:
      SERVICES: '{{default "web" .SERVICES}}'
    cmds:
      - |
        if command -v jq > /dev/null 2>&1; then
          docker inspect {{.SERVICES}} | jq '.[].State.Health | {Status: .Status}'
        else
          echo "⚠️ 'jq' not found; fallback to docker ps output"
          docker ps --filter "name={{.SERVICES}}" --format "table {{.Names}}\t{{.Status}}"
        fi
    silent: true

  api:
    desc: Start just the API server
    cmds:
      - task: up
        vars: { SERVICES: "api" }
    silent: true

  web:
    desc: Start just the Apache webserver
    cmds:
      - task: up
        vars: { SERVICES: "web" }
    silent: true

  web:refresh:
    desc: Start just the Apache webserver
    cmds:
      - task: up:refresh
        vars: { SERVICES: "web" }
    silent: true

  web:logs:
    desc: View Apache logs
    cmds:
      - task: logs
        vars: { SERVICES: "web" }
    silent: true

  web:status:
    desc: View Apache status
    cmds:
      - task: status
        vars: { SERVICES: "web" }
    silent: true

  web:health:
    desc: View Apache health status
    cmds:
      - task: health
        vars: { SERVICES: "web" }
    silent: true

  database:
    desc: Start just the database service
    cmds:
      - task: up
        vars: { SERVICES: "database" }
    silent: true

  database:logs:
    desc: View database logs
    cmds:
      - task: logs
        vars: { SERVICES: "database" }
    silent: true

  database:status:
    desc: View database status
    cmds:
      - task: status
        vars: { SERVICES: "database" }
    silent: true

  database:health:
    desc: View database health status
    cmds:
      - task: health
        vars: { SERVICES: "database" }
    silent: true

  keycloak:database:
    desc: Start just the Keycloak database service
    cmds:
      - task: up
        vars: { SERVICES: "keycloak-db" }
    silent: true

  keycloak:database:logs:
    desc: View Keycloak database logs
    cmds:
      - task: logs
        vars: { SERVICES: "keycloak-db" }
    silent: true

  keycloak:database:status:
    desc: View Keycloak database status
    cmds:
      - task: status
        vars: { SERVICES: "keycloak-db" }
    silent: true

  keycloak:database:health:
    desc: View Keycloak database health status
    cmds:
      - task: health
        vars: { SERVICES: "keycloak-db" }
    silent: true

  keycloak:
    desc: Start just the Keycloak service
    cmds:
      - task: up
        vars: { SERVICES: "keycloak" }
    silent: true

  keycloak:logs:
    desc: View Keycloak logs
    cmds:
      - task: logs
        vars: { SERVICES: "keycloak" }
    silent: true

  keycloak:status:
    desc: View Keycloak status
    cmds:
      - task: status
        vars: { SERVICES: "keycloak" }
    silent: true

  keycloak:health:
    desc: View Keycloak status
    cmds:
      - task: health
        vars: { SERVICES: "keycloak" }
    silent: true

  pgadmin:
    desc: Start just the pgadmin service
    cmds:
      - task: up
        vars: { SERVICES: "pgadmin" }
    silent: true

  pgadmin:logs:
    desc: View pgadmin logs
    cmds:
      - task: logs
        vars: { SERVICES: "pgadmin" }
    silent: true

  pgadmin:status:
    desc: View pgadmin status
    cmds:
      - task: status
        vars: { SERVICES: "pgadmin" }
    silent: true

  pgadmin:health:
    desc: View pgadmin health status
    cmds:
      - task: health
        vars: { SERVICES: "pgadmin" }
    silent: true
