---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
# Taskfile for managing development tasks in a multi-platform environment

version: "3"

vars:
  ARCH:
    sh: uname -m
  PLATFORM:
    sh: uname -s

tasks:
  setup:
    desc: Install dependencies and set up the environment
    cmds:
      - pnpm install --frozen-lockfile
      - poetry install --no-root
      - task hooks:install
    silent: true

  lint:
    desc: Run MegaLinter with auto-fix
    cmds: ["pnpm run lint"]

  lint:check:
    desc: Run MegaLinter without auto-fix
    cmds: ["pnpm run lint:check"]

  lint:mypy:
    desc: Run MegaLinter with mypy
    cmds: ["pnpm run lint:mypy"]

  lint:actionlint:
    desc: Run MegaLinter with actionlint
    cmds: ["pnpm run lint:actionlint"]

  lint:ansible:
    desc: Run MegaLinter with ansible-lint
    cmds: ["pnpm run lint:ansible"]

  lint:spectral:
    desc: Run MegaLinter with spectral
    cmds: ["pnpm run lint:spectral"]

  lint:arm-ttk:
    desc: Run MegaLinter with arm-ttk
    cmds: ["pnpm run lint:arm-ttk"]

  lint:bash_exec:
    desc: Run MegaLinter with bash-exec
    cmds: ["pnpm run lint:bash_exec"]

  lint:bash_shellcheck:
    desc: Run MegaLinter with shellcheck
    cmds: ["pnpm run lint:bash_shellcheck"]

  lint:bash_shfmt:
    desc: Run MegaLinter with shfmt
    cmds: ["pnpm run lint:bash_shfmt"]

  secrets:
    desc: Scan for secrets using gitleaks
    cmds:
      - gitleaks detect --source . --config=.gitleaks.toml --redact

  lint:spellcheck:
    cmds: ["pnpm run lint:spellcheck"]

  format:check:
    cmds: ["pnpm run format:check"]

  format:
    cmds: ["pnpm run format"]

  lint:copypaste:
    cmds: ["pnpm run lint:copypaste"]

  packages:
    desc: List all installed packages
    cmds: ["poetry show --tree"]

  os:
    cmds:
      - 'echo "Running on {{OS}}/{{ARCH}}"'
    silent: true

  generate-tree:
    desc: Generate docs/tree.md
    cmds:
      - bash ./scripts/generate-tree.sh
    silent: true

  act:sanity:
    desc: Run act with correct container arch for Apple Silicon
    cmds:
      - |
        echo "üß† Detected: {{OS}}/{{ARCH}}"
        if [[ "{{OS}}" == "darwin" && "{{ARCH}}" == "arm64" ]]; then
          echo "‚öôÔ∏è  Apple Silicon detected ‚Äî forcing container arch to linux/amd64"
          act push --job sanity-check --container-architecture linux/amd64 --verbose
        else
          act push --job sanity-check --verbose
        fi
    silent: true

  hooks:install:
    desc: Install pre-commit hooks (inside Poetry venv)
    cmds:
      - poetry run pre-commit install
      - poetry run pre-commit autoupdate
      - poetry run pre-commit install-hooks
    silent: true

  hooks:run:
    desc: Run all pre-commit hooks on all files (Poetry)
    cmds:
      - poetry run pre-commit run --all-files
    silent: true

  hooks:ci:
    desc: CI-safe pre-commit hook run (Poetry, no install)
    cmds:
      - poetry run pre-commit run --all-files --show-diff-on-failure --color always
    silent: true

  hooks:autoupdate:
    desc: Update pre-commit hooks to latest versions
    cmds:
      - poetry run pre-commit autoupdate
    silent: true

  security:talisman:
    desc: Run Talisman security checks
    cmds:
      - talisman --scan --loglevel warn --reportDirectory reports/talisman
    silent: true

  write:scientific-paper:
    desc: Write a scientific paper about the project
    cmds:
      - latexmk -cd -pdf -pvc docs/scientific-paper/main.tex
    silent: true
    env:
      LATEXMK_DEBUG: "1"

  write:proposal:
    desc: Build or live-preview the government proposal
    cmds:
      - latexmk -cd -pdf -pvc docs/proposal/main.tex -verbose
    silent: true
    env:
      LATEXMK_DEBUG: "1"

  apps:ui:install:
    desc: Install UI apps
    cmds:
      - task --dir apps/ui --taskfile apps/ui/Taskfile.yml setup
    silent: true

  dev:
    desc: Start the development environment using Docker Compose
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          up \
          --build \
          --force-recreate \
          --detach \
          --always-recreate-deps
    silent: true

  dev:database:
    desc: Start the development database locally using Docker Compose
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          up database pgadmin \
          --build \
          --force-recreate \
          --detach \
          --always-recreate-deps
    silent: true

  dev:api:
    desc: Start the API service locally using Docker Compose
    cmds:
      - |
        docker compose \
          --file universal.base.yml \
          --file universal.development.yml \
          --env-file .env.universal \
          --env-file .env.development \
          up api \
          --build \
          --force-recreate \
          --detach \
          --always-recreate-deps
    silent: true

  ansible:test:
    desc: Run local Ansible test playbook
    dir: ansible
    env:
      ANSIBLE_CONFIG: "./.ansible.cfg"
    cmds:
      - ansible-playbook site.yml

  linter:
    desc: Run MegaLinter via Docker
    cmds:
      - docker compose --file .devcontainer/docker-compose.yml run --rm megalinter
