#!/usr/bin/env bash
# generate-password: Generates a secure random password

set -euo pipefail

USE_COLOR=true
LENGTH=32
COPY_TO_CLIPBOARD=false

# ─────────────────────────────────────────────────────────────────────────────
# CLI Help
# ─────────────────────────────────────────────────────────────────────────────
print_help() {
    cat <<EOF
Usage: $(basename "$0") [options]

Generate a strong, random password.

Options:
  --length N      Length of password (default: 32)
  --copy          Copy to clipboard (requires xclip/pbcopy)
  --no-color      Disable color output
  -h, --help      Show this help message
EOF
}

POSITIONAL_ARGS=()
for arg in "$@"; do
    case "${arg}" in
    --no-color) USE_COLOR=false ;;
    --copy) COPY_TO_CLIPBOARD=true ;;
    --length)
        shift
        LENGTH="${1:-32}"
        ;;
    -h | --help)
        print_help
        exit 0
        ;;
    -*)
        echo "❌ Unknown flag: ${arg}" >&2
        print_help
        exit 1
        ;;
    *) POSITIONAL_ARGS+=("${arg}") ;;
    esac
done
set -- "${POSITIONAL_ARGS[@]:-}"

# ─────────────────────────────────────────────────────────────────────────────
# Logging + Color
# ─────────────────────────────────────────────────────────────────────────────
color() {
    [[ "${USE_COLOR}" == true ]] || return 0
    case "$1" in
    reset) echo -e "\033[0m" ;;
    cyan) echo -e "\033[36m" ;;
    green) echo -e "\033[32m" ;;
    yellow) echo -e "\033[33m" ;;
    red) echo -e "\033[31m" ;;
    *) echo "" ;;
    esac
}

log() {
    local type="$1"
    shift
    local prefix color_code output
    case "${type}" in
    info)
        prefix="👉"
        color_code=$(color cyan)
        ;;
    success)
        prefix="✅"
        color_code=$(color green)
        ;;
    warn)
        prefix="⚠️"
        color_code=$(color yellow)
        ;;
    error)
        prefix="❌"
        color_code=$(color red)
        ;;
    *)
        prefix=""
        color_code=$(color reset)
        ;;
    esac
    output="${color_code}${prefix} $*$(color reset)"
    if [[ "${type}" == "error" ]]; then
        printf "%s\n" "${output}" >&2
        exit 1
    else
        printf "%s\n" "${output}"
    fi
}

# ─────────────────────────────────────────────────────────────────────────────
# Password Generation
# ─────────────────────────────────────────────────────────────────────────────
generate_password() {
    openssl rand -base64 48 | tr -d '/+=' | cut -c1-"${LENGTH}"
}

copy_to_clipboard() {
    if command -v pbcopy &>/dev/null; then
        printf "%s" "$1" | pbcopy
        log success "Copied password to clipboard via pbcopy"
    elif command -v xclip &>/dev/null; then
        printf "%s" "$1" | xclip -selection clipboard
        log success "Copied password to clipboard via xclip"
    else
        log warn "No clipboard utility found (pbcopy or xclip)"
    fi
}

main() {
    if ! command -v openssl &>/dev/null; then
        log error "openssl command not found. Please install OpenSSL."
    fi

    local password
    password=$(generate_password)

    log success "Generated password:"
    echo "${password}"

    if [[ "${COPY_TO_CLIPBOARD}" == true ]]; then
        copy_to_clipboard "${password}"
    fi
}

main "$@"
