#!/usr/bin/env bash
# freeze-github-release.sh
# Outputs reproducible URL, SHA256, and MD5 for a GitHub release tarball or latest branch archive.

set -euo pipefail

TEMP_TARBALL="${TMPDIR:-/tmp}/tmp-release.tar.gz"

require_deps() {
    for cmd in curl jq sha256sum md5sum; do
        command -v "${cmd}" >/dev/null || {
            echo "❌ Required command '${cmd}' not found. Please install it." >&2
            exit 1
        }
    done
}

usage() {
    cat <<EOF
📦 freeze-github-release

Usage:
  freeze-github-release <github_owner/repo> [--archive]
  freeze-github-release ImageMagick/ImageMagick
  freeze-github-release PDAL/PDAL --archive

Description:
  Downloads the latest release tarball (or latest commit from main/master with --archive)
  and computes its SHA256 and MD5 hashes for reproducible installation.

Options:
  --archive     Use latest commit archive from default branch (main or master)
  -h, --help    Show this help message

Output:
  export SOURCE_URL=...
  export SOURCE_SHA256=...
  export SOURCE_MD5=...

EOF
    exit 0
}

cleanup() {
    [[ -f "${TEMP_TARBALL}" ]] && rm -f "${TEMP_TARBALL}"
}

fetch_latest_release_url() {
    local repo="$1"
    local gh_api="https://api.github.com/repos/${repo}/releases/latest"
    echo "🌐 Fetching latest release from: ${gh_api}" >&2

    local url
    url=$(curl --silent --show-error --location "${gh_api}" | jq --raw-output '.tarball_url')

    if [[ -z "${url}" || "${url}" == "null" ]]; then
        echo "❌ No releases found for ${repo}" >&2
        return 1
    fi

    echo "${url}"
}

fetch_latest_archive_url() {
    local repo="$1"
    local gh_api="https://api.github.com/repos/${repo}"
    echo "🌐 Fetching latest archive from default branch (main/master)..." >&2

    local default_branch
    default_branch=$(curl --silent --show-error --location "${gh_api}" | jq --raw-output '.default_branch')

    if [[ -z "${default_branch}" || "${default_branch}" == "null" ]]; then
        echo "❌ Failed to determine default branch (main/master) for ${repo}" >&2
        exit 1
    fi

    echo "https://api.github.com/repos/${repo}/tarball/${default_branch}"
}

download_and_hash() {
    local url="$1"
    echo "⬇️  Downloading archive: ${url}" >&2
    mkdir -p "$(dirname "${TEMP_TARBALL}")"
    curl --fail --location --output "${TEMP_TARBALL}" "${url}"

    echo "🔐 Calculating checksums..." >&2
    local sha256 md5
    sha256=$(sha256sum "${TEMP_TARBALL}" | awk '{print $1}')
    md5=$(md5sum "${TEMP_TARBALL}" | awk '{print $1}')

    echo ""
    echo "✅ Reproducible Source Metadata:"
    echo "export SOURCE_URL=\"${url}\""
    echo "export SOURCE_SHA256=\"${sha256}\""
    echo "export SOURCE_MD5=\"${md5}\""
    echo ""
}

main() {
    trap cleanup EXIT
    require_deps

    local use_archive=false
    local repo=""

    for arg in "$@"; do
        case "${arg}" in
        --archive) use_archive=true ;;
        -h | --help) usage ;;
        *)
            if [[ -z "${repo}" ]]; then
                repo="${arg}"
            else
                echo "❌ Unexpected argument: ${arg}" >&2
                usage
            fi
            ;;
        esac
    done

    if [[ -z "${repo}" ]]; then
        echo "❌ No GitHub repo specified." >&2
        usage
    fi

    local url=""
    if [[ "${use_archive}" == true ]]; then
        url=$(fetch_latest_archive_url "${repo}")
    else
        url=$(fetch_latest_release_url "${repo}")
        if [[ -z "${url}" ]]; then
            echo "⚠️ No release found, falling back to archive from main/master..." >&2
            url=$(fetch_latest_archive_url "${repo}")
        fi
    fi

    download_and_hash "${url}"
}

main "$@"
