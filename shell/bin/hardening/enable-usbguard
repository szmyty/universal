#!/usr/bin/env bash
# enable-usbguard: Installs and enables USBGuard with a default policy

set -euo pipefail

USE_COLOR=true
FORCE=false
DRY_RUN=false
VERBOSE=false

# ─────────────────────────────────────────────────────────────────────────────
# CLI + Log Utilities
# ─────────────────────────────────────────────────────────────────────────────
print_help() {
    cat <<EOF
Usage: $(basename "$0") [options]

Install and enable USBGuard to block unauthorized USB devices.

Options:
  --dry-run       Simulate actions without making changes
  --force         Skip confirmation prompt
  --verbose       Show usbguard.service status after start
  --no-color      Disable colored output
  -h, --help      Show this help message
EOF
    exit 0
}

color() {
    [[ "${USE_COLOR}" == true ]] || return 0
    case "$1" in
    reset) echo -e "\033[0m" ;;
    cyan) echo -e "\033[36m" ;;
    green) echo -e "\033[32m" ;;
    yellow) echo -e "\033[33m" ;;
    red) echo -e "\033[31m" ;;
    *) echo "" ;;
    esac
}

log() {
    local type="$1"
    shift
    local prefix color_code output

    case "${type}" in
    info)
        prefix="👉"
        color_code=$(color cyan)
        ;;
    success)
        prefix="✅"
        color_code=$(color green)
        ;;
    warn)
        prefix="⚠️"
        color_code=$(color yellow)
        ;;
    error)
        prefix="❌"
        color_code=$(color red)
        ;;
    *)
        prefix=""
        color_code=$(color reset)
        ;;
    esac

    output="${color_code}${prefix} $*$(color reset)"
    if [[ "${type}" == "error" ]]; then
        printf "%s\n" "${output}" >&2
        exit 1
    elif [[ "${VERBOSE}" == true || "${QUIET:-false}" != true ]]; then
        printf "%s\n" "${output}"
    fi
}

parse_args() {
    for arg in "$@"; do
        case "${arg}" in
        --dry-run) DRY_RUN=true ;;
        --force) FORCE=true ;;
        --verbose) VERBOSE=true ;;
        --no-color) USE_COLOR=false ;;
        -h | --help) print_help ;;
        *) log error "Unknown argument: ${arg}" ;;
        esac
    done
}

# ─────────────────────────────────────────────────────────────────────────────
# Safety Guards
# ─────────────────────────────────────────────────────────────────────────────
check_if_container() {
    if grep -qE 'docker|containerd' /proc/1/cgroup 2>/dev/null; then
        log warn "Skipping: USBGuard not applicable inside containers."
        exit 0
    fi
}

check_root() {
    if [[ "${EUID}" -ne 0 ]]; then
        log error "This script must be run as root (use sudo)."
    fi
}

confirm_or_abort() {
    if [[ "${FORCE}" == true ]]; then return; fi

    log warn "This will enable USB access control on this system."
    read -rp "Continue? (y/N): " confirm
    [[ "${confirm}" =~ ^[Yy]$ ]] || log error "Cancelled by user."
}

# ─────────────────────────────────────────────────────────────────────────────
# USBGuard Setup Steps
# ─────────────────────────────────────────────────────────────────────────────
install_usbguard() {
    log info "Installing usbguard..."
    apt-get update -qq
    apt-get install -y --no-install-recommends usbguard
}

generate_and_install_rules() {
    log info "Generating USBGuard policy..."
    usbguard generate-policy >/tmp/usbguard.rules

    log info "Installing rule set to /etc/usbguard/rules.conf"
    install -m 0600 -o root -g root /tmp/usbguard.rules /etc/usbguard/rules.conf
}

start_usbguard_service() {
    log info "Enabling and starting usbguard..."
    systemctl enable usbguard.service
    systemctl start usbguard.service
}

show_usbguard_status() {
    if [[ "${VERBOSE}" == true ]]; then
        systemctl status usbguard.service --no-pager
    fi
}

dry_run_message() {
    log info "Would install usbguard"
    log info "Would generate and install rules"
    log info "Would enable and start the service"
}

main() {
    parse_args "$@"
    check_if_container
    check_root
    confirm_or_abort

    if [[ "${DRY_RUN}" == true ]]; then
        dry_run_message
        exit 0
    fi

    install_usbguard
    generate_and_install_rules
    start_usbguard_service
    show_usbguard_status
    log success "USBGuard setup complete."
}

main "$@"
