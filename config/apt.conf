# General APT behavior

# Enable colorized output.
APT::Color "1";

# Automatically clean up installed packages to save disk space.
APT::Clean-Installed "1";

# Immediately configure all packages after unpacking.
APT::Immediate-Configure "1";

# Do not force the breaking of package dependency loops during installation.
APT::Force-LoopBreak "0";

# Disable installation of recommended packages by default.
APT::Install-Recommends "0";

# Disable installation of suggested packages by default.
APT::Install-Suggests "0";

# Remove unused package dependencies aggressively.
APT::AutoRemove::SuggestsImportant "0";

# Debug output configuration.
# Uncomment the following lines to enable debug output for troubleshooting purposes.
# Debug::pkgAcquire::Worker "true";
# Debug::pkgAcquire::http "true";

# Get options

# Do not install recommended packages by default.
APT::Get::Install-Recommends "0";

# Do not install suggested packages by default.
APT::Get::Install-Suggests "0";

# Automatically assume "yes" to all prompts.
APT::Get::Assume-Yes "1";

# Download only; package files are not unpacked or installed.
APT::Get::Download-Only "0";

# Suppress output for quieter logs during package operations.
APT::Get::Quiet "1";

# Suppress output for quieter logs during package acquisition.
APT::Get::Quiet::Acquire "1";

# Update options

# Suppress output during package updates.
APT::Update::Quiet "1";

# Suppress output during package acquisition.
APT::Update::Quiet::Acquire "1";

# Create a timestamp before running an update.
APT::Update::Pre-Invoke "date -u > /var/lib/apt/pre-update-stamp";

# Create a timestamp after an update and clean up package cache.
APT::Update::Post-Invoke "date -u > /var/lib/apt/post-update-stamp && rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";

# Sandbox settings

# Ensure that APT operations run as the root user in Docker environments.
APT::Sandbox::User "root";

# Acquire options

# Allow TLS/SSL for HTTP(S) connections.
Acquire::AllowTLS "1";

# Enable the use of patch diffs to reduce download sizes.
Acquire::PDiffs "1";

# Enable the By-Hash method to fetch package indexes.
Acquire::By-Hash "1";

# Controls how APT handles downloading files. The default mode is "host".
Acquire::Queue-Mode "host";

# Number of times APT should retry a failed download.
Acquire::Retries "3";

# Use symlinks for source packages by default.
Acquire::Source-Symlinks "1";

# Enable checking of the "Valid-Until" field in the Release file.
Acquire::Check-Valid-Until "1";

# Max allowed time into the future for a package list's "Valid-Until" field.
Acquire::Max-FutureTime "86400";

# Check the date on the system against the date of the release file.
Acquire::Check-Date "1";

# Disable the download of translation files to minimize download size.
Acquire::Languages "none";

# Enable gzipped indexes to save disk space.
Acquire::GzipIndexes "1";

# Use gzipped compression for package indexes.
Acquire::CompressionTypes::Order "gz";

# Do not force APT to use IPv4 for network connections.
Acquire::ForceIPv4 "0";

# Do not force APT to use IPv6 for network connections.
Acquire::ForceIPv6 "0";

# Set the max allowed size for Release files to 10MB.
Acquire::MaxReleaseFileSize "10485760";

# Enable the use of SRV records to find the appropriate repository.
Acquire::EnableSrvRecords "1";

# Do not allow APT to use insecure repositories.
Acquire::AllowInsecureRepositories "0";

# Do not allow APT to use weak repositories.
Acquire::AllowWeakRepositories "0";

# Prevent downgrading to insecure repositories.
Acquire::AllowDowngradeToInsecureRepositories "0";

# HTTPS options

# Disable caching to ensure always retrieving the latest data.
Acquire::https::No-Cache "1";

# Prevent storing responses to disk.
Acquire::https::No-Store "1";

# Set the timeout (in seconds) for HTTPS connections.
Acquire::https::Timeout "10";

# Enable peer verification.
Acquire::https::Verify-Peer "1";

# Uncommented options for HTTPS
# Directly connect to example.org, bypassing any proxy.
# Acquire::https::Proxy::example.org "DIRECT";

# Use a specific proxy for HTTPS connections.
# Acquire::https::Proxy "socks5h://apt:pass@127.0.0.1:9050";

# Use a custom script to automatically detect the proxy.
# Acquire::https::Proxy-Auto-Detect "/usr/local/bin/apt-https-proxy-auto-detect";

# Set the maximum age (in seconds) of cached responses.
# Acquire::https::Max-Age "3600";

# Limit the download speed (in KB/s).
# Acquire::https::Dl-Limit "42";

# Disable HTTP pipelining for connections.
# Acquire::https::Pipeline-Depth "0";

# Disable redirects for HTTPS connections.
# Acquire::https::AllowRedirect "false";

# Set a custom user-agent for HTTPS requests.
# Acquire::https::User-Agent "My APT-HTTPS";

# Disable sending the "Accept" header in requests.
# Acquire::https::SendAccept "false";

# Path to the Certificate Authority (CA) file.
# Acquire::https::CAInfo "/path/to/ca/certs.pem";

# Path to the Certificate Revocation List (CRL) file.
# Acquire::https::CRLFile "/path/to/all/crl.pem";

# Disable host verification for specific hosts.
# Acquire::https::Verify-Host::broken.example.org "false";

# Path to the client SSL certificate for specific hosts.
# Acquire::https::SSLCert::example.org "/path/to/client/cert.pem";

# Path to the client SSL key for specific hosts.
# Acquire::https::SSLKey::example.org "/path/to/client/key.pem";

# Directory options

# Do not store package lists to save disk space.
Dir::Cache::pkgcache "";

# Do not store source package lists to save disk space.
Dir::Cache::srcpkgcache "";

# DPKG options

# Display progress bars during package installation.
DPkg::Progress-Fancy "1";

# Remove cached .deb files and clear package archives after installation.
DPkg::Post-Invoke "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";
